{"version":3,"sources":["Initializers/firebase.js","Redux/Actions/types.js","Components/Header.js","Redux/Actions/index.js","Components/Footer.js","Pages/Home/index.js","App.js","Redux/Reducers/auth.js","Redux/Reducers/todo.js","Redux/Reducers/index.js","Redux/Store/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","SUCESSFUL_LOGIN","FAILURE_LOGIN","LOGOUT","ADD_TODO","Header","auth","useSelector","state","dispatch","useDispatch","login","provider","GoogleAuthProvider","signInWithPopup","then","result","uid","user","username","displayName","email","photo","photoURL","type","payload","logoutGoogle","Navbar","expand","variant","bg","Brand","to","Button","onClick","className","Footer","style","color","textAlign","Home","todos","useState","title","setTitle","Container","Row","Col","md","Form","Group","Control","size","value","placeholder","onChange","e","preventDefault","target","name","onKeyDown","key","data","done","createdAt","Date","now","alert","autoComplete","App","exac","path","component","initialState","localStorage","getItem","JSON","parse","authReducer","action","setItem","stringify","removeItem","signOut","todoReducer","a","collection","doc","set","rootReducers","combineReducers","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cd931e3.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst config = {\n  apiKey: \"AIzaSyD2kJmyE9IuE_wumYVW53R-i78RIYxnMYY\",\n  authDomain: \"fibare-27779.firebaseapp.com\",\n  projectId: \"fibare-27779\",\n  storageBucket: \"fibare-27779.appspot.com\",\n  messagingSenderId: \"403727482050\",\n  appId: \"1:403727482050:web:b87bbe329b877517a30f5b\",\n  measurementId: \"G-S24RTX6YTD\",\n};\n\nfirebase.initializeApp(config);\nexport const db = firebase.firestore();\nexport default firebase;\n","export const SUCESSFUL_LOGIN = \"SUCESSFUL_LOGIN\";\nexport const FAILURE_LOGIN = \"FAILURE_LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\nexport const LIST_TODOS = \"LIST_TODOS\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const UPDATE_TODO = \"UPDATE_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\n","import React from \"react\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport firebase from \"../Initializers/firebase\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Navbar, Button } from \"react-bootstrap\";\nimport { successfulLogin, failurefulLogin, logout } from \"../Redux/Actions\";\n\nexport const Header = () => {\n  const auth = useSelector((state) => state.auth);\n  const dispatch = useDispatch();\n\n  function login() {\n    let provider = new firebase.auth.GoogleAuthProvider();\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then((result) => {\n        const uid = result.user.uid;\n        const username = result.user.displayName;\n        const email = result.user.email;\n        const photo = result.user.photoURL;\n        const userData = {\n          uid: uid,\n          username: username,\n          email: email,\n          photo: photo,\n        };\n        if (username && email && photo) {\n          dispatch(successfulLogin(userData));\n        } else {\n          dispatch(failurefulLogin());\n        }\n      });\n  }\n\n  function logoutGoogle() {\n    dispatch(logout());\n  }\n\n  return (\n    <>\n      <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n        <Navbar.Brand>\n          <Link to=\"/\">Fibare</Link>\n        </Navbar.Brand>\n        {auth.login ? (\n          <Button\n            onClick={() => {\n              logoutGoogle();\n            }}\n          >\n            Logout\n          </Button>\n        ) : (\n          <Button\n            variant=\"light\"\n            className=\"text-danger\"\n            onClick={() => {\n              login();\n            }}\n          >\n            Google Login\n          </Button>\n        )}\n      </Navbar>\n    </>\n  );\n};\n","import { SUCESSFUL_LOGIN, FAILURE_LOGIN, LOGOUT, ADD_TODO } from \"./types\";\n\nexport const successfulLogin = (data) => {\n  return {\n    type: SUCESSFUL_LOGIN,\n    payload: data,\n  };\n};\n\nexport const failurefulLogin = () => {\n  return {\n    type: FAILURE_LOGIN,\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: LOGOUT,\n  };\n};\n\nexport const addTodo = (todo) => {\n  return {\n    type: ADD_TODO,\n    payload: todo,\n  };\n};\n","import React from \"react\";\n\nexport const Footer = () => {\n  return (\n    <>\n      <p style={{ color: \"#aaaaaa\", textAlign: \"center\" }}>judlup.dev</p>\n    </>\n  );\n};\n","import React, { useRef, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addTodo } from \"../../Redux/Actions\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  Button,\n  InputGroup,\n  FormControl,\n} from \"react-bootstrap\";\nimport \"./index.css\";\n\nexport const Home = () => {\n  const auth = useSelector((state) => state.auth);\n  const todos = useSelector((state) => state.todos);\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState(\"\");\n  function handleInput(e) {\n    e.preventDefault();\n    const { name, value } = e.target;\n    // setValues({ ...values, [name]: value });\n    setTitle(value);\n  }\n\n  const handleSubmit = (e) => {\n    if (e.key === \"Enter\") {\n      const user = auth.user;\n      const data = {\n        user: user.uid,\n        title: title,\n        done: false,\n        createdAt: Date.now(),\n      };\n      const result = dispatch(addTodo(data));\n      if (result.payload) {\n        setTitle(\"\");\n        alert(\"Todo created successful\");\n      }\n    }\n  };\n\n  return (\n    <>\n      {auth.login ? (\n        <>\n          <Container className=\"container\">\n            <Row>\n              <Col md={12}>\n                <br />\n                <h4 className=\"text-muted text-center\">Fibare ToDo</h4>\n                <hr />\n              </Col>\n              <Col md={12}>\n                <Form.Group>\n                  <Form.Control\n                    size=\"lg\"\n                    type=\"text\"\n                    value={title}\n                    placeholder=\"Enter Todo here... [Press Enter]\"\n                    onChange={handleInput}\n                    onKeyDown={handleSubmit}\n                    autoComplete=\"off\"\n                  />\n                </Form.Group>\n              </Col>\n              <Col md={12}>\n                <ul className=\"todos list-groups\">\n                  {/* {todos.length}-- */}\n                  {/* {todos.length == 0\n                    ? \"Nada\"\n                    : todos.map((todo) => {\n                        <li className=\"todo list-group-item\">\n                          <InputGroup>\n                            <Form.Check\n                              type=\"checkbox\"\n                              label=\"write this code \"\n                            />\n                            <InputGroup.Append>\n                              <Button\n                                variant=\"outline-secondary\"\n                                size=\"sm\"\n                                className=\"home-delete-btn\"\n                              >\n                                &times;\n                              </Button>\n                            </InputGroup.Append>\n                          </InputGroup>\n                        </li>;\n                      })} */}\n                </ul>\n              </Col>\n            </Row>\n          </Container>\n        </>\n      ) : (\n        <>\n          <Container className=\"container\">\n            <Row>\n              <Col>\n                <br />\n                <h4 className=\"text-muted text-center\">Sign In and ToDo all</h4>\n                <hr />\n              </Col>\n            </Row>\n          </Container>\n        </>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\n// Libs\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./style.css\";\n\nimport { Header } from \"./Components/Header\";\nimport { Footer } from \"./Components/Footer\";\nimport { Home } from \"./Pages/Home\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Header />\n        <Switch>\n          {/* <Route path=\"/login\" component={Login} /> */}\n          <Route exac path=\"/\" component={Home} />\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n","import { act } from \"react-dom/test-utils\";\nimport firebase from \"../../Initializers/firebase\";\n\nimport { SUCESSFUL_LOGIN, FAILURE_LOGIN, LOGOUT } from \"../Actions/types\";\n\nconst initialState = {\n  login: localStorage.getItem(\"userData\") == null ? false : true,\n  user: JSON.parse(localStorage.getItem(\"userData\")),\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SUCESSFUL_LOGIN:\n      localStorage.setItem(\"userData\", JSON.stringify(action.payload));\n      return {\n        ...state,\n        login: true,\n        user: action.payload,\n      };\n    case FAILURE_LOGIN:\n      localStorage.removeItem(\"userData\");\n      return { ...state, login: false, user: \"\" };\n    case LOGOUT:\n      firebase\n        .auth()\n        .signOut()\n        .then(function () {\n          localStorage.removeItem(\"userData\");\n        });\n      return { ...state, login: false, user: \"\" };\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n","import { ADD_TODO } from \"../Actions/types\";\n\nimport { db } from \"../../Initializers/firebase\";\n\nconst todos = [];\n\nconst todoReducer = async (state = todos, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      const result = await db.collection(\"todos\").doc().set(action.payload);\n      return result;\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","import authReducer from \"./auth\";\nimport todoReducer from \"./todo\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducers = combineReducers({\n  auth: authReducer,\n  todos: todoReducer,\n});\n\nexport default rootReducers;\n","import { createStore } from \"redux\";\nimport rootReducer from \"../Reducers/index\"; \n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n// Redux\nimport store from \"./Redux/Store/index\";\nimport { Provider } from \"react-redux\";\n\nwindow.store = store;\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}